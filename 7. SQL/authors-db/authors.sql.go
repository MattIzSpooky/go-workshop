// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: authors.sql

package authors_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearAuthorsTable = `-- name: ClearAuthorsTable :exec
DELETE FROM authors
`

func (q *Queries) ClearAuthorsTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clearAuthorsTable)
	return err
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
    name, bio
) VALUES ($1, $2)
RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  pgtype.Text
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listAuthorBooks = `-- name: ListAuthorBooks :many
SELECT authors.id, authors.name, authors.bio, books.id, books.author_id, books.name, books.summary
FROM authors
         JOIN books ON books.author_id = authors.id
WHERE authors.id = $1
`

type ListAuthorBooksRow struct {
	Author Author
	Book   Book
}

// SELECT authors.*, books.*
// See https://docs.sqlc.dev/en/stable/howto/embedding.html
func (q *Queries) ListAuthorBooks(ctx context.Context, id int32) ([]ListAuthorBooksRow, error) {
	rows, err := q.db.Query(ctx, listAuthorBooks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAuthorBooksRow
	for rows.Next() {
		var i ListAuthorBooksRow
		if err := rows.Scan(
			&i.Author.ID,
			&i.Author.Name,
			&i.Author.Bio,
			&i.Book.ID,
			&i.Book.AuthorID,
			&i.Book.Name,
			&i.Book.Summary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors
set name = $2,
    bio = $3
WHERE id = $1
RETURNING id, name, bio
`

type UpdateAuthorParams struct {
	ID   int32
	Name string
	Bio  pgtype.Text
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}
