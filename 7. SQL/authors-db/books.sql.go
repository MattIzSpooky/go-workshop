// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package authors_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearBooksTable = `-- name: ClearBooksTable :exec
DELETE FROM books
`

func (q *Queries) ClearBooksTable(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clearBooksTable)
	return err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    author_id, name, summary
) VALUES ($1, $2, $3)
RETURNING id, author_id, name, summary
`

type CreateBookParams struct {
	AuthorID int32
	Name     string
	Summary  pgtype.Text
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook, arg.AuthorID, arg.Name, arg.Summary)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.Summary,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, author_id, name, summary FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.Summary,
	)
	return i, err
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT id, author_id, name, summary FROM books
WHERE author_id = $1
`

func (q *Queries) GetBooksByAuthor(ctx context.Context, authorID int32) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Name,
			&i.Summary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListBooks(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
set author_id = $2,
    name = $3,
    summary = $4
WHERE id = $1
RETURNING id, author_id, name, summary
`

type UpdateBookParams struct {
	ID       int32
	AuthorID int32
	Name     string
	Summary  pgtype.Text
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.ID,
		arg.AuthorID,
		arg.Name,
		arg.Summary,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.Summary,
	)
	return i, err
}
